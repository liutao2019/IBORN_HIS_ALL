//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Neusoft.SOC.Local.PubReport.Components
{
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("dsMedFeeDetail")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsMedFeeDetail : global::System.Data.DataSet {
        
        private element1DataTable tableelement1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsMedFeeDetail() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsMedFeeDetail(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["element1"] != null)) {
                    base.Tables.Add(new element1DataTable(ds.Tables["element1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public element1DataTable element1 {
            get {
                return this.tableelement1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            dsMedFeeDetail cln = ((dsMedFeeDetail)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["element1"] != null)) {
                    base.Tables.Add(new element1DataTable(ds.Tables["element1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableelement1 = ((element1DataTable)(base.Tables["element1"]));
            if ((initTable == true)) {
                if ((this.tableelement1 != null)) {
                    this.tableelement1.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsMedFeeDetail";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsMedFeeDetail.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableelement1 = new element1DataTable();
            base.Tables.Add(this.tableelement1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeelement1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            dsMedFeeDetail ds = new dsMedFeeDetail();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void element1RowChangeEventHandler(object sender, element1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class element1DataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columndtStart;
            
            private global::System.Data.DataColumn columndtEnd;
            
            private global::System.Data.DataColumn columnworkUnit;
            
            private global::System.Data.DataColumn columnname;
            
            private global::System.Data.DataColumn columnmCardNo;
            
            private global::System.Data.DataColumn columndayBeginEnd;
            
            private global::System.Data.DataColumn columndays;
            
            private global::System.Data.DataColumn columnmedicine;
            
            private global::System.Data.DataColumn columnnormalCheck;
            
            private global::System.Data.DataColumn columnnormalCure;
            
            private global::System.Data.DataColumn columnnormalBed;
            
            private global::System.Data.DataColumn columnkeepFee;
            
            private global::System.Data.DataColumn columnsubTot;
            
            private global::System.Data.DataColumn columnpayPercent;
            
            private global::System.Data.DataColumn columnrealCost;
            
            private global::System.Data.DataColumn columnmemo;
            
            private global::System.Data.DataColumn columnpayKind;
            
            private global::System.Data.DataColumn columnownPay;
            
            private global::System.Data.DataColumn columndiagFee;
            
            private global::System.Data.DataColumn columntotCost;
            
            private global::System.Data.DataColumn columnpatientNo;
            
            private global::System.Data.DataColumn columnchengyao;
            
            private global::System.Data.DataColumn columncaoyao;
            
            private global::System.Data.DataColumn columnhuayan;
            
            private global::System.Data.DataColumn columnshuxue;
            
            private global::System.Data.DataColumn columnshoushu;
            
            private global::System.Data.DataColumn columntype;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public element1DataTable() {
                this.TableName = "element1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal element1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected element1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dtStartColumn {
                get {
                    return this.columndtStart;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dtEndColumn {
                get {
                    return this.columndtEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn workUnitColumn {
                get {
                    return this.columnworkUnit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn nameColumn {
                get {
                    return this.columnname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn mCardNoColumn {
                get {
                    return this.columnmCardNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn dayBeginEndColumn {
                get {
                    return this.columndayBeginEnd;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn daysColumn {
                get {
                    return this.columndays;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn medicineColumn {
                get {
                    return this.columnmedicine;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn normalCheckColumn {
                get {
                    return this.columnnormalCheck;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn normalCureColumn {
                get {
                    return this.columnnormalCure;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn normalBedColumn {
                get {
                    return this.columnnormalBed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn keepFeeColumn {
                get {
                    return this.columnkeepFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn subTotColumn {
                get {
                    return this.columnsubTot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn payPercentColumn {
                get {
                    return this.columnpayPercent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn realCostColumn {
                get {
                    return this.columnrealCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn memoColumn {
                get {
                    return this.columnmemo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn payKindColumn {
                get {
                    return this.columnpayKind;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ownPayColumn {
                get {
                    return this.columnownPay;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn diagFeeColumn {
                get {
                    return this.columndiagFee;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn totCostColumn {
                get {
                    return this.columntotCost;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn patientNoColumn {
                get {
                    return this.columnpatientNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn chengyaoColumn {
                get {
                    return this.columnchengyao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn caoyaoColumn {
                get {
                    return this.columncaoyao;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn huayanColumn {
                get {
                    return this.columnhuayan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shuxueColumn {
                get {
                    return this.columnshuxue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn shoushuColumn {
                get {
                    return this.columnshoushu;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn typeColumn {
                get {
                    return this.columntype;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public element1Row this[int index] {
                get {
                    return ((element1Row)(this.Rows[index]));
                }
            }
            
            public event element1RowChangeEventHandler element1RowChanging;
            
            public event element1RowChangeEventHandler element1RowChanged;
            
            public event element1RowChangeEventHandler element1RowDeleting;
            
            public event element1RowChangeEventHandler element1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addelement1Row(element1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public element1Row Addelement1Row(
                        System.DateTime dtStart, 
                        System.DateTime dtEnd, 
                        string workUnit, 
                        string name, 
                        string mCardNo, 
                        string dayBeginEnd, 
                        int days, 
                        decimal medicine, 
                        decimal normalCheck, 
                        decimal normalCure, 
                        decimal normalBed, 
                        decimal keepFee, 
                        decimal subTot, 
                        decimal payPercent, 
                        decimal realCost, 
                        string memo, 
                        string payKind, 
                        decimal ownPay, 
                        decimal diagFee, 
                        decimal totCost, 
                        string patientNo, 
                        decimal chengyao, 
                        decimal caoyao, 
                        decimal huayan, 
                        decimal shuxue, 
                        decimal shoushu, 
                        string type) {
                element1Row rowelement1Row = ((element1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        dtStart,
                        dtEnd,
                        workUnit,
                        name,
                        mCardNo,
                        dayBeginEnd,
                        days,
                        medicine,
                        normalCheck,
                        normalCure,
                        normalBed,
                        keepFee,
                        subTot,
                        payPercent,
                        realCost,
                        memo,
                        payKind,
                        ownPay,
                        diagFee,
                        totCost,
                        patientNo,
                        chengyao,
                        caoyao,
                        huayan,
                        shuxue,
                        shoushu,
                        type};
                rowelement1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowelement1Row);
                return rowelement1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                element1DataTable cln = ((element1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new element1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columndtStart = base.Columns["dtStart"];
                this.columndtEnd = base.Columns["dtEnd"];
                this.columnworkUnit = base.Columns["workUnit"];
                this.columnname = base.Columns["name"];
                this.columnmCardNo = base.Columns["mCardNo"];
                this.columndayBeginEnd = base.Columns["dayBeginEnd"];
                this.columndays = base.Columns["days"];
                this.columnmedicine = base.Columns["medicine"];
                this.columnnormalCheck = base.Columns["normalCheck"];
                this.columnnormalCure = base.Columns["normalCure"];
                this.columnnormalBed = base.Columns["normalBed"];
                this.columnkeepFee = base.Columns["keepFee"];
                this.columnsubTot = base.Columns["subTot"];
                this.columnpayPercent = base.Columns["payPercent"];
                this.columnrealCost = base.Columns["realCost"];
                this.columnmemo = base.Columns["memo"];
                this.columnpayKind = base.Columns["payKind"];
                this.columnownPay = base.Columns["ownPay"];
                this.columndiagFee = base.Columns["diagFee"];
                this.columntotCost = base.Columns["totCost"];
                this.columnpatientNo = base.Columns["patientNo"];
                this.columnchengyao = base.Columns["chengyao"];
                this.columncaoyao = base.Columns["caoyao"];
                this.columnhuayan = base.Columns["huayan"];
                this.columnshuxue = base.Columns["shuxue"];
                this.columnshoushu = base.Columns["shoushu"];
                this.columntype = base.Columns["type"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columndtStart = new global::System.Data.DataColumn("dtStart", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndtStart);
                this.columndtEnd = new global::System.Data.DataColumn("dtEnd", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndtEnd);
                this.columnworkUnit = new global::System.Data.DataColumn("workUnit", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnworkUnit);
                this.columnname = new global::System.Data.DataColumn("name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnname);
                this.columnmCardNo = new global::System.Data.DataColumn("mCardNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmCardNo);
                this.columndayBeginEnd = new global::System.Data.DataColumn("dayBeginEnd", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndayBeginEnd);
                this.columndays = new global::System.Data.DataColumn("days", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndays);
                this.columnmedicine = new global::System.Data.DataColumn("medicine", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmedicine);
                this.columnnormalCheck = new global::System.Data.DataColumn("normalCheck", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnormalCheck);
                this.columnnormalCure = new global::System.Data.DataColumn("normalCure", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnormalCure);
                this.columnnormalBed = new global::System.Data.DataColumn("normalBed", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnnormalBed);
                this.columnkeepFee = new global::System.Data.DataColumn("keepFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnkeepFee);
                this.columnsubTot = new global::System.Data.DataColumn("subTot", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnsubTot);
                this.columnpayPercent = new global::System.Data.DataColumn("payPercent", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpayPercent);
                this.columnrealCost = new global::System.Data.DataColumn("realCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrealCost);
                this.columnmemo = new global::System.Data.DataColumn("memo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmemo);
                this.columnpayKind = new global::System.Data.DataColumn("payKind", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpayKind);
                this.columnownPay = new global::System.Data.DataColumn("ownPay", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnownPay);
                this.columndiagFee = new global::System.Data.DataColumn("diagFee", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndiagFee);
                this.columntotCost = new global::System.Data.DataColumn("totCost", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntotCost);
                this.columnpatientNo = new global::System.Data.DataColumn("patientNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnpatientNo);
                this.columnchengyao = new global::System.Data.DataColumn("chengyao", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnchengyao);
                this.columncaoyao = new global::System.Data.DataColumn("caoyao", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columncaoyao);
                this.columnhuayan = new global::System.Data.DataColumn("huayan", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnhuayan);
                this.columnshuxue = new global::System.Data.DataColumn("shuxue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshuxue);
                this.columnshoushu = new global::System.Data.DataColumn("shoushu", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnshoushu);
                this.columntype = new global::System.Data.DataColumn("type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntype);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public element1Row Newelement1Row() {
                return ((element1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new element1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(element1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.element1RowChanged != null)) {
                    this.element1RowChanged(this, new element1RowChangeEvent(((element1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.element1RowChanging != null)) {
                    this.element1RowChanging(this, new element1RowChangeEvent(((element1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.element1RowDeleted != null)) {
                    this.element1RowDeleted(this, new element1RowChangeEvent(((element1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.element1RowDeleting != null)) {
                    this.element1RowDeleting(this, new element1RowChangeEvent(((element1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeelement1Row(element1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                dsMedFeeDetail ds = new dsMedFeeDetail();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "element1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class element1Row : global::System.Data.DataRow {
            
            private element1DataTable tableelement1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal element1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableelement1 = ((element1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dtStart {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableelement1.dtStartColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“dtStart”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.dtStartColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime dtEnd {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableelement1.dtEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“dtEnd”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.dtEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string workUnit {
                get {
                    try {
                        return ((string)(this[this.tableelement1.workUnitColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“workUnit”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.workUnitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string name {
                get {
                    try {
                        return ((string)(this[this.tableelement1.nameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“name”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string mCardNo {
                get {
                    try {
                        return ((string)(this[this.tableelement1.mCardNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“mCardNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.mCardNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string dayBeginEnd {
                get {
                    try {
                        return ((string)(this[this.tableelement1.dayBeginEndColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“dayBeginEnd”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.dayBeginEndColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int days {
                get {
                    try {
                        return ((int)(this[this.tableelement1.daysColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“days”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.daysColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal medicine {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.medicineColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“medicine”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.medicineColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal normalCheck {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.normalCheckColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“normalCheck”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.normalCheckColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal normalCure {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.normalCureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“normalCure”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.normalCureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal normalBed {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.normalBedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“normalBed”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.normalBedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal keepFee {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.keepFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“keepFee”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.keepFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal subTot {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.subTotColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“subTot”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.subTotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal payPercent {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.payPercentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“payPercent”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.payPercentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal realCost {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.realCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“realCost”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.realCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string memo {
                get {
                    try {
                        return ((string)(this[this.tableelement1.memoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“memo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.memoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string payKind {
                get {
                    try {
                        return ((string)(this[this.tableelement1.payKindColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“payKind”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.payKindColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ownPay {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.ownPayColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“ownPay”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.ownPayColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal diagFee {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.diagFeeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“diagFee”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.diagFeeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal totCost {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.totCostColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“totCost”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.totCostColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string patientNo {
                get {
                    try {
                        return ((string)(this[this.tableelement1.patientNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“patientNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.patientNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal chengyao {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.chengyaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“chengyao”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.chengyaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal caoyao {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.caoyaoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“caoyao”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.caoyaoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal huayan {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.huayanColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“huayan”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.huayanColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal shuxue {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.shuxueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“shuxue”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.shuxueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal shoushu {
                get {
                    try {
                        return ((decimal)(this[this.tableelement1.shoushuColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“shoushu”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.shoushuColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string type {
                get {
                    try {
                        return ((string)(this[this.tableelement1.typeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“element1”中列“type”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableelement1.typeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdtStartNull() {
                return this.IsNull(this.tableelement1.dtStartColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdtStartNull() {
                this[this.tableelement1.dtStartColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdtEndNull() {
                return this.IsNull(this.tableelement1.dtEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdtEndNull() {
                this[this.tableelement1.dtEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsworkUnitNull() {
                return this.IsNull(this.tableelement1.workUnitColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetworkUnitNull() {
                this[this.tableelement1.workUnitColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnameNull() {
                return this.IsNull(this.tableelement1.nameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnameNull() {
                this[this.tableelement1.nameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmCardNoNull() {
                return this.IsNull(this.tableelement1.mCardNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmCardNoNull() {
                this[this.tableelement1.mCardNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdayBeginEndNull() {
                return this.IsNull(this.tableelement1.dayBeginEndColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdayBeginEndNull() {
                this[this.tableelement1.dayBeginEndColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdaysNull() {
                return this.IsNull(this.tableelement1.daysColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdaysNull() {
                this[this.tableelement1.daysColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmedicineNull() {
                return this.IsNull(this.tableelement1.medicineColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmedicineNull() {
                this[this.tableelement1.medicineColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnormalCheckNull() {
                return this.IsNull(this.tableelement1.normalCheckColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnormalCheckNull() {
                this[this.tableelement1.normalCheckColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnormalCureNull() {
                return this.IsNull(this.tableelement1.normalCureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnormalCureNull() {
                this[this.tableelement1.normalCureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsnormalBedNull() {
                return this.IsNull(this.tableelement1.normalBedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetnormalBedNull() {
                this[this.tableelement1.normalBedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IskeepFeeNull() {
                return this.IsNull(this.tableelement1.keepFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetkeepFeeNull() {
                this[this.tableelement1.keepFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IssubTotNull() {
                return this.IsNull(this.tableelement1.subTotColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetsubTotNull() {
                this[this.tableelement1.subTotColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspayPercentNull() {
                return this.IsNull(this.tableelement1.payPercentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpayPercentNull() {
                this[this.tableelement1.payPercentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrealCostNull() {
                return this.IsNull(this.tableelement1.realCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrealCostNull() {
                this[this.tableelement1.realCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsmemoNull() {
                return this.IsNull(this.tableelement1.memoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetmemoNull() {
                this[this.tableelement1.memoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspayKindNull() {
                return this.IsNull(this.tableelement1.payKindColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpayKindNull() {
                this[this.tableelement1.payKindColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsownPayNull() {
                return this.IsNull(this.tableelement1.ownPayColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetownPayNull() {
                this[this.tableelement1.ownPayColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsdiagFeeNull() {
                return this.IsNull(this.tableelement1.diagFeeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetdiagFeeNull() {
                this[this.tableelement1.diagFeeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstotCostNull() {
                return this.IsNull(this.tableelement1.totCostColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettotCostNull() {
                this[this.tableelement1.totCostColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IspatientNoNull() {
                return this.IsNull(this.tableelement1.patientNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetpatientNoNull() {
                this[this.tableelement1.patientNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IschengyaoNull() {
                return this.IsNull(this.tableelement1.chengyaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetchengyaoNull() {
                this[this.tableelement1.chengyaoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IscaoyaoNull() {
                return this.IsNull(this.tableelement1.caoyaoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetcaoyaoNull() {
                this[this.tableelement1.caoyaoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IshuayanNull() {
                return this.IsNull(this.tableelement1.huayanColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SethuayanNull() {
                this[this.tableelement1.huayanColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsshuxueNull() {
                return this.IsNull(this.tableelement1.shuxueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetshuxueNull() {
                this[this.tableelement1.shuxueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsshoushuNull() {
                return this.IsNull(this.tableelement1.shoushuColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetshoushuNull() {
                this[this.tableelement1.shoushuColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IstypeNull() {
                return this.IsNull(this.tableelement1.typeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SettypeNull() {
                this[this.tableelement1.typeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class element1RowChangeEvent : global::System.EventArgs {
            
            private element1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public element1RowChangeEvent(element1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public element1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591