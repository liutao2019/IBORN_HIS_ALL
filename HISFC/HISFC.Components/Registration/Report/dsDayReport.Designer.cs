//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.42
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace UFC.Registration.Report {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsDayReport")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsDayReport : System.Data.DataSet {
        
        private dayReportDataTable tabledayReport;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsDayReport() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsDayReport(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["dayReport"] != null)) {
                    base.Tables.Add(new dayReportDataTable(ds.Tables["dayReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dayReportDataTable dayReport {
            get {
                return this.tabledayReport;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsDayReport cln = ((dsDayReport)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dayReport"] != null)) {
                    base.Tables.Add(new dayReportDataTable(ds.Tables["dayReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledayReport = ((dayReportDataTable)(base.Tables["dayReport"]));
            if ((initTable == true)) {
                if ((this.tabledayReport != null)) {
                    this.tabledayReport.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsDayReport";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsDayReport.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledayReport = new dayReportDataTable();
            base.Tables.Add(this.tabledayReport);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedayReport() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsDayReport ds = new dsDayReport();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void dayReportRowChangeEventHandler(object sender, dayReportRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dayReportDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column处方开始号;
            
            private System.Data.DataColumn column处方结束号;
            
            private System.Data.DataColumn column处方张数;
            
            private System.Data.DataColumn column挂号金额;
            
            private System.Data.DataColumn column诊金;
            
            private System.Data.DataColumn column病历金额;
            
            private System.Data.DataColumn column其他金额;
            
            private System.Data.DataColumn column实收金额;
            
            private System.Data.DataColumn column状态;
            
            private System.Data.DataColumn column操作员代码;
            
            private System.Data.DataColumn column操作员名称;
            
            private System.Data.DataColumn column开始时间;
            
            private System.Data.DataColumn column结束时间;
            
            private System.Data.DataColumn column操作时间;
            
            private System.Data.DataColumn column医院名称;
            
            private System.Data.DataColumn column实收合计;
            
            private System.Data.DataColumn column挂号合计;
            
            private System.Data.DataColumn column诊金合计;
            
            private System.Data.DataColumn column大写金额;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dayReportDataTable() {
                this.TableName = "dayReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dayReportDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dayReportDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 处方开始号Column {
                get {
                    return this.column处方开始号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 处方结束号Column {
                get {
                    return this.column处方结束号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 处方张数Column {
                get {
                    return this.column处方张数;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 挂号金额Column {
                get {
                    return this.column挂号金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 诊金Column {
                get {
                    return this.column诊金;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 病历金额Column {
                get {
                    return this.column病历金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 其他金额Column {
                get {
                    return this.column其他金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 实收金额Column {
                get {
                    return this.column实收金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 状态Column {
                get {
                    return this.column状态;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 操作员代码Column {
                get {
                    return this.column操作员代码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 操作员名称Column {
                get {
                    return this.column操作员名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 开始时间Column {
                get {
                    return this.column开始时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 结束时间Column {
                get {
                    return this.column结束时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 操作时间Column {
                get {
                    return this.column操作时间;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 医院名称Column {
                get {
                    return this.column医院名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 实收合计Column {
                get {
                    return this.column实收合计;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 挂号合计Column {
                get {
                    return this.column挂号合计;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 诊金合计Column {
                get {
                    return this.column诊金合计;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 大写金额Column {
                get {
                    return this.column大写金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dayReportRow this[int index] {
                get {
                    return ((dayReportRow)(this.Rows[index]));
                }
            }
            
            public event dayReportRowChangeEventHandler dayReportRowChanging;
            
            public event dayReportRowChangeEventHandler dayReportRowChanged;
            
            public event dayReportRowChangeEventHandler dayReportRowDeleting;
            
            public event dayReportRowChangeEventHandler dayReportRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddayReportRow(dayReportRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dayReportRow AdddayReportRow(
                        string 处方开始号, 
                        string 处方结束号, 
                        long 处方张数, 
                        decimal 挂号金额, 
                        decimal 诊金, 
                        decimal 病历金额, 
                        decimal 其他金额, 
                        decimal 实收金额, 
                        string 状态, 
                        string 操作员代码, 
                        string 操作员名称, 
                        System.DateTime 开始时间, 
                        System.DateTime 结束时间, 
                        System.DateTime 操作时间, 
                        string 医院名称, 
                        decimal 实收合计, 
                        decimal 挂号合计, 
                        decimal 诊金合计, 
                        string 大写金额) {
                dayReportRow rowdayReportRow = ((dayReportRow)(this.NewRow()));
                rowdayReportRow.ItemArray = new object[] {
                        处方开始号,
                        处方结束号,
                        处方张数,
                        挂号金额,
                        诊金,
                        病历金额,
                        其他金额,
                        实收金额,
                        状态,
                        操作员代码,
                        操作员名称,
                        开始时间,
                        结束时间,
                        操作时间,
                        医院名称,
                        实收合计,
                        挂号合计,
                        诊金合计,
                        大写金额};
                this.Rows.Add(rowdayReportRow);
                return rowdayReportRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                dayReportDataTable cln = ((dayReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new dayReportDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column处方开始号 = base.Columns["处方开始号"];
                this.column处方结束号 = base.Columns["处方结束号"];
                this.column处方张数 = base.Columns["处方张数"];
                this.column挂号金额 = base.Columns["挂号金额"];
                this.column诊金 = base.Columns["诊金"];
                this.column病历金额 = base.Columns["病历金额"];
                this.column其他金额 = base.Columns["其他金额"];
                this.column实收金额 = base.Columns["实收金额"];
                this.column状态 = base.Columns["状态"];
                this.column操作员代码 = base.Columns["操作员代码"];
                this.column操作员名称 = base.Columns["操作员名称"];
                this.column开始时间 = base.Columns["开始时间"];
                this.column结束时间 = base.Columns["结束时间"];
                this.column操作时间 = base.Columns["操作时间"];
                this.column医院名称 = base.Columns["医院名称"];
                this.column实收合计 = base.Columns["实收合计"];
                this.column挂号合计 = base.Columns["挂号合计"];
                this.column诊金合计 = base.Columns["诊金合计"];
                this.column大写金额 = base.Columns["大写金额"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column处方开始号 = new System.Data.DataColumn("处方开始号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column处方开始号);
                this.column处方结束号 = new System.Data.DataColumn("处方结束号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column处方结束号);
                this.column处方张数 = new System.Data.DataColumn("处方张数", typeof(long), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column处方张数);
                this.column挂号金额 = new System.Data.DataColumn("挂号金额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column挂号金额);
                this.column诊金 = new System.Data.DataColumn("诊金", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column诊金);
                this.column病历金额 = new System.Data.DataColumn("病历金额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column病历金额);
                this.column其他金额 = new System.Data.DataColumn("其他金额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column其他金额);
                this.column实收金额 = new System.Data.DataColumn("实收金额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column实收金额);
                this.column状态 = new System.Data.DataColumn("状态", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column状态);
                this.column操作员代码 = new System.Data.DataColumn("操作员代码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column操作员代码);
                this.column操作员名称 = new System.Data.DataColumn("操作员名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column操作员名称);
                this.column开始时间 = new System.Data.DataColumn("开始时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column开始时间);
                this.column结束时间 = new System.Data.DataColumn("结束时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column结束时间);
                this.column操作时间 = new System.Data.DataColumn("操作时间", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column操作时间);
                this.column医院名称 = new System.Data.DataColumn("医院名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column医院名称);
                this.column实收合计 = new System.Data.DataColumn("实收合计", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column实收合计);
                this.column挂号合计 = new System.Data.DataColumn("挂号合计", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column挂号合计);
                this.column诊金合计 = new System.Data.DataColumn("诊金合计", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column诊金合计);
                this.column大写金额 = new System.Data.DataColumn("大写金额", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column大写金额);
                this.column开始时间.AllowDBNull = false;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dayReportRow NewdayReportRow() {
                return ((dayReportRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new dayReportRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(dayReportRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dayReportRowChanged != null)) {
                    this.dayReportRowChanged(this, new dayReportRowChangeEvent(((dayReportRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dayReportRowChanging != null)) {
                    this.dayReportRowChanging(this, new dayReportRowChangeEvent(((dayReportRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dayReportRowDeleted != null)) {
                    this.dayReportRowDeleted(this, new dayReportRowChangeEvent(((dayReportRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dayReportRowDeleting != null)) {
                    this.dayReportRowDeleting(this, new dayReportRowChangeEvent(((dayReportRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedayReportRow(dayReportRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsDayReport ds = new dsDayReport();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dayReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dayReportRow : System.Data.DataRow {
            
            private dayReportDataTable tabledayReport;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dayReportRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledayReport = ((dayReportDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 处方开始号 {
                get {
                    try {
                        return ((string)(this[this.tabledayReport.处方开始号Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“处方开始号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.处方开始号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 处方结束号 {
                get {
                    try {
                        return ((string)(this[this.tabledayReport.处方结束号Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“处方结束号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.处方结束号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long 处方张数 {
                get {
                    try {
                        return ((long)(this[this.tabledayReport.处方张数Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“处方张数”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.处方张数Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 挂号金额 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.挂号金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“挂号金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.挂号金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 诊金 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.诊金Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“诊金”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.诊金Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 病历金额 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.病历金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“病历金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.病历金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 其他金额 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.其他金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“其他金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.其他金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 实收金额 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.实收金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“实收金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.实收金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 状态 {
                get {
                    try {
                        return ((string)(this[this.tabledayReport.状态Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“状态”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.状态Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 操作员代码 {
                get {
                    try {
                        return ((string)(this[this.tabledayReport.操作员代码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“操作员代码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.操作员代码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 操作员名称 {
                get {
                    try {
                        return ((string)(this[this.tabledayReport.操作员名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“操作员名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.操作员名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 开始时间 {
                get {
                    return ((System.DateTime)(this[this.tabledayReport.开始时间Column]));
                }
                set {
                    this[this.tabledayReport.开始时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 结束时间 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledayReport.结束时间Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“结束时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.结束时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 操作时间 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledayReport.操作时间Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“操作时间”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.操作时间Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 医院名称 {
                get {
                    try {
                        return ((string)(this[this.tabledayReport.医院名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“医院名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.医院名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 实收合计 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.实收合计Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“实收合计”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.实收合计Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 挂号合计 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.挂号合计Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“挂号合计”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.挂号合计Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 诊金合计 {
                get {
                    try {
                        return ((decimal)(this[this.tabledayReport.诊金合计Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“诊金合计”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.诊金合计Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 大写金额 {
                get {
                    try {
                        return ((string)(this[this.tabledayReport.大写金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dayReport”中列“大写金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledayReport.大写金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is处方开始号Null() {
                return this.IsNull(this.tabledayReport.处方开始号Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set处方开始号Null() {
                this[this.tabledayReport.处方开始号Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is处方结束号Null() {
                return this.IsNull(this.tabledayReport.处方结束号Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set处方结束号Null() {
                this[this.tabledayReport.处方结束号Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is处方张数Null() {
                return this.IsNull(this.tabledayReport.处方张数Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set处方张数Null() {
                this[this.tabledayReport.处方张数Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is挂号金额Null() {
                return this.IsNull(this.tabledayReport.挂号金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set挂号金额Null() {
                this[this.tabledayReport.挂号金额Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is诊金Null() {
                return this.IsNull(this.tabledayReport.诊金Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set诊金Null() {
                this[this.tabledayReport.诊金Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病历金额Null() {
                return this.IsNull(this.tabledayReport.病历金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病历金额Null() {
                this[this.tabledayReport.病历金额Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is其他金额Null() {
                return this.IsNull(this.tabledayReport.其他金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set其他金额Null() {
                this[this.tabledayReport.其他金额Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is实收金额Null() {
                return this.IsNull(this.tabledayReport.实收金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set实收金额Null() {
                this[this.tabledayReport.实收金额Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is状态Null() {
                return this.IsNull(this.tabledayReport.状态Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set状态Null() {
                this[this.tabledayReport.状态Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is操作员代码Null() {
                return this.IsNull(this.tabledayReport.操作员代码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set操作员代码Null() {
                this[this.tabledayReport.操作员代码Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is操作员名称Null() {
                return this.IsNull(this.tabledayReport.操作员名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set操作员名称Null() {
                this[this.tabledayReport.操作员名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is结束时间Null() {
                return this.IsNull(this.tabledayReport.结束时间Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set结束时间Null() {
                this[this.tabledayReport.结束时间Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is操作时间Null() {
                return this.IsNull(this.tabledayReport.操作时间Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set操作时间Null() {
                this[this.tabledayReport.操作时间Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is医院名称Null() {
                return this.IsNull(this.tabledayReport.医院名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set医院名称Null() {
                this[this.tabledayReport.医院名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is实收合计Null() {
                return this.IsNull(this.tabledayReport.实收合计Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set实收合计Null() {
                this[this.tabledayReport.实收合计Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is挂号合计Null() {
                return this.IsNull(this.tabledayReport.挂号合计Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set挂号合计Null() {
                this[this.tabledayReport.挂号合计Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is诊金合计Null() {
                return this.IsNull(this.tabledayReport.诊金合计Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set诊金合计Null() {
                this[this.tabledayReport.诊金合计Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is大写金额Null() {
                return this.IsNull(this.tabledayReport.大写金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set大写金额Null() {
                this[this.tabledayReport.大写金额Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dayReportRowChangeEvent : System.EventArgs {
            
            private dayReportRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dayReportRowChangeEvent(dayReportRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dayReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591