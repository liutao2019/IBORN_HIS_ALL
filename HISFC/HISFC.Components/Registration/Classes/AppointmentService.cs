//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由yerl编写工具生成
//     初始化时传入URL地址即可访问WebService
// </auto-generated>
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.5472
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace FS.HISFC.Components.Registration.Classes
{
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("WebSvsTester", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "AppointmentServiceSoap", Namespace = "FS.his")]
    public partial class AppointmentService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback WebInvokeOperationCompleted;

        /// <remarks/>
        public AppointmentService()
        {
        }
        public AppointmentService(string Url)
        {
            this.Url = Url;
        }
        /// <remarks/>
        public event WebInvokeCompletedEventHandler WebInvokeCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("FS.his/WebInvoke", RequestNamespace = "FS.his", ResponseNamespace = "FS.his", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WebInvoke(string req)
        {
            object[] results = this.Invoke("WebInvoke", new object[] {
                        req});
            return ((string)(results[0]));
        }

        /// <remarks/>
        public void WebInvokeAsync(string req)
        {
            this.WebInvokeAsync(req, null);
        }

        /// <remarks/>
        public void WebInvokeAsync(string req, object userState)
        {
            if ((this.WebInvokeOperationCompleted == null))
            {
                this.WebInvokeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnWebInvokeOperationCompleted);
            }
            this.InvokeAsync("WebInvoke", new object[] {
                        req}, this.WebInvokeOperationCompleted, userState);
        }

        private void OnWebInvokeOperationCompleted(object arg)
        {
            if ((this.WebInvokeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.WebInvokeCompleted(this, new WebInvokeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("WebSvsTester", "1.0.0.0")]
    public delegate void WebInvokeCompletedEventHandler(object sender, WebInvokeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("WebSvsTester", "1.0.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class WebInvokeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal WebInvokeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public string Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

