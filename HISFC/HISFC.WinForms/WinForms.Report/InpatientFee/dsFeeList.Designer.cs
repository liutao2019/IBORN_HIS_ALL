//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.832
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Neusoft.Report.InpatientFee {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("dsFeeList")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class dsFeeList : System.Data.DataSet {
        
        private dtFeeListDataTable tabledtFeeList;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public dsFeeList() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected dsFeeList(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["dtFeeList"] != null)) {
                    base.Tables.Add(new dtFeeListDataTable(ds.Tables["dtFeeList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public dtFeeListDataTable dtFeeList {
            get {
                return this.tabledtFeeList;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            dsFeeList cln = ((dsFeeList)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["dtFeeList"] != null)) {
                    base.Tables.Add(new dtFeeListDataTable(ds.Tables["dtFeeList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tabledtFeeList = ((dtFeeListDataTable)(base.Tables["dtFeeList"]));
            if ((initTable == true)) {
                if ((this.tabledtFeeList != null)) {
                    this.tabledtFeeList.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "dsFeeList";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/dsFeeList.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tabledtFeeList = new dtFeeListDataTable();
            base.Tables.Add(this.tabledtFeeList);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializedtFeeList() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            dsFeeList ds = new dsFeeList();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void dtFeeListRowChangeEventHandler(object sender, dtFeeListRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class dtFeeListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn column分类;
            
            private System.Data.DataColumn column项目名称;
            
            private System.Data.DataColumn column规格;
            
            private System.Data.DataColumn column单价;
            
            private System.Data.DataColumn column数量;
            
            private System.Data.DataColumn column单位;
            
            private System.Data.DataColumn column金额;
            
            private System.Data.DataColumn column自费;
            
            private System.Data.DataColumn column自付;
            
            private System.Data.DataColumn column公费;
            
            private System.Data.DataColumn column住院号;
            
            private System.Data.DataColumn column姓名;
            
            private System.Data.DataColumn column病区;
            
            private System.Data.DataColumn column床号;
            
            private System.Data.DataColumn column总费用;
            
            private System.Data.DataColumn column总公费;
            
            private System.Data.DataColumn column已清费用;
            
            private System.Data.DataColumn column未清费用;
            
            private System.Data.DataColumn column预交金;
            
            private System.Data.DataColumn column余额;
            
            private System.Data.DataColumn column本日发生;
            
            private System.Data.DataColumn column本日公费;
            
            private System.Data.DataColumn column应交;
            
            private System.Data.DataColumn column费用日期;
            
            private System.Data.DataColumn column科室代码;
            
            private System.Data.DataColumn column国家编码;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFeeListDataTable() {
                this.TableName = "dtFeeList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFeeListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected dtFeeListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 分类Column {
                get {
                    return this.column分类;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 项目名称Column {
                get {
                    return this.column项目名称;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 规格Column {
                get {
                    return this.column规格;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 单价Column {
                get {
                    return this.column单价;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 数量Column {
                get {
                    return this.column数量;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 单位Column {
                get {
                    return this.column单位;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 金额Column {
                get {
                    return this.column金额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 自费Column {
                get {
                    return this.column自费;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 自付Column {
                get {
                    return this.column自付;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 公费Column {
                get {
                    return this.column公费;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 住院号Column {
                get {
                    return this.column住院号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 姓名Column {
                get {
                    return this.column姓名;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 病区Column {
                get {
                    return this.column病区;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 床号Column {
                get {
                    return this.column床号;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 总费用Column {
                get {
                    return this.column总费用;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 总公费Column {
                get {
                    return this.column总公费;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 已清费用Column {
                get {
                    return this.column已清费用;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 未清费用Column {
                get {
                    return this.column未清费用;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 预交金Column {
                get {
                    return this.column预交金;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 余额Column {
                get {
                    return this.column余额;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 本日发生Column {
                get {
                    return this.column本日发生;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 本日公费Column {
                get {
                    return this.column本日公费;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 应交Column {
                get {
                    return this.column应交;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 费用日期Column {
                get {
                    return this.column费用日期;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 科室代码Column {
                get {
                    return this.column科室代码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn 国家编码Column {
                get {
                    return this.column国家编码;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFeeListRow this[int index] {
                get {
                    return ((dtFeeListRow)(this.Rows[index]));
                }
            }
            
            public event dtFeeListRowChangeEventHandler dtFeeListRowChanging;
            
            public event dtFeeListRowChangeEventHandler dtFeeListRowChanged;
            
            public event dtFeeListRowChangeEventHandler dtFeeListRowDeleting;
            
            public event dtFeeListRowChangeEventHandler dtFeeListRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AdddtFeeListRow(dtFeeListRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFeeListRow AdddtFeeListRow(
                        string 分类, 
                        string 项目名称, 
                        string 规格, 
                        decimal 单价, 
                        decimal 数量, 
                        string 单位, 
                        decimal 金额, 
                        decimal 自费, 
                        decimal 自付, 
                        decimal 公费, 
                        string 住院号, 
                        string 姓名, 
                        string 病区, 
                        string 床号, 
                        decimal 总费用, 
                        decimal 总公费, 
                        decimal 已清费用, 
                        decimal 未清费用, 
                        decimal 预交金, 
                        decimal 余额, 
                        decimal 本日发生, 
                        decimal 本日公费, 
                        decimal 应交, 
                        System.DateTime 费用日期, 
                        string 科室代码, 
                        string 国家编码) {
                dtFeeListRow rowdtFeeListRow = ((dtFeeListRow)(this.NewRow()));
                rowdtFeeListRow.ItemArray = new object[] {
                        分类,
                        项目名称,
                        规格,
                        单价,
                        数量,
                        单位,
                        金额,
                        自费,
                        自付,
                        公费,
                        住院号,
                        姓名,
                        病区,
                        床号,
                        总费用,
                        总公费,
                        已清费用,
                        未清费用,
                        预交金,
                        余额,
                        本日发生,
                        本日公费,
                        应交,
                        费用日期,
                        科室代码,
                        国家编码};
                this.Rows.Add(rowdtFeeListRow);
                return rowdtFeeListRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                dtFeeListDataTable cln = ((dtFeeListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new dtFeeListDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.column分类 = base.Columns["分类"];
                this.column项目名称 = base.Columns["项目名称"];
                this.column规格 = base.Columns["规格"];
                this.column单价 = base.Columns["单价"];
                this.column数量 = base.Columns["数量"];
                this.column单位 = base.Columns["单位"];
                this.column金额 = base.Columns["金额"];
                this.column自费 = base.Columns["自费"];
                this.column自付 = base.Columns["自付"];
                this.column公费 = base.Columns["公费"];
                this.column住院号 = base.Columns["住院号"];
                this.column姓名 = base.Columns["姓名"];
                this.column病区 = base.Columns["病区"];
                this.column床号 = base.Columns["床号"];
                this.column总费用 = base.Columns["总费用"];
                this.column总公费 = base.Columns["总公费"];
                this.column已清费用 = base.Columns["已清费用"];
                this.column未清费用 = base.Columns["未清费用"];
                this.column预交金 = base.Columns["预交金"];
                this.column余额 = base.Columns["余额"];
                this.column本日发生 = base.Columns["本日发生"];
                this.column本日公费 = base.Columns["本日公费"];
                this.column应交 = base.Columns["应交"];
                this.column费用日期 = base.Columns["费用日期"];
                this.column科室代码 = base.Columns["科室代码"];
                this.column国家编码 = base.Columns["国家编码"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.column分类 = new System.Data.DataColumn("分类", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column分类);
                this.column项目名称 = new System.Data.DataColumn("项目名称", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column项目名称);
                this.column规格 = new System.Data.DataColumn("规格", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column规格);
                this.column单价 = new System.Data.DataColumn("单价", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column单价);
                this.column数量 = new System.Data.DataColumn("数量", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column数量);
                this.column单位 = new System.Data.DataColumn("单位", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column单位);
                this.column金额 = new System.Data.DataColumn("金额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column金额);
                this.column自费 = new System.Data.DataColumn("自费", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column自费);
                this.column自付 = new System.Data.DataColumn("自付", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column自付);
                this.column公费 = new System.Data.DataColumn("公费", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column公费);
                this.column住院号 = new System.Data.DataColumn("住院号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column住院号);
                this.column姓名 = new System.Data.DataColumn("姓名", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column姓名);
                this.column病区 = new System.Data.DataColumn("病区", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column病区);
                this.column床号 = new System.Data.DataColumn("床号", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column床号);
                this.column总费用 = new System.Data.DataColumn("总费用", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column总费用);
                this.column总公费 = new System.Data.DataColumn("总公费", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column总公费);
                this.column已清费用 = new System.Data.DataColumn("已清费用", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column已清费用);
                this.column未清费用 = new System.Data.DataColumn("未清费用", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column未清费用);
                this.column预交金 = new System.Data.DataColumn("预交金", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column预交金);
                this.column余额 = new System.Data.DataColumn("余额", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column余额);
                this.column本日发生 = new System.Data.DataColumn("本日发生", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column本日发生);
                this.column本日公费 = new System.Data.DataColumn("本日公费", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column本日公费);
                this.column应交 = new System.Data.DataColumn("应交", typeof(decimal), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column应交);
                this.column费用日期 = new System.Data.DataColumn("费用日期", typeof(System.DateTime), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column费用日期);
                this.column科室代码 = new System.Data.DataColumn("科室代码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column科室代码);
                this.column国家编码 = new System.Data.DataColumn("国家编码", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.column国家编码);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFeeListRow NewdtFeeListRow() {
                return ((dtFeeListRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new dtFeeListRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(dtFeeListRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.dtFeeListRowChanged != null)) {
                    this.dtFeeListRowChanged(this, new dtFeeListRowChangeEvent(((dtFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.dtFeeListRowChanging != null)) {
                    this.dtFeeListRowChanging(this, new dtFeeListRowChangeEvent(((dtFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.dtFeeListRowDeleted != null)) {
                    this.dtFeeListRowDeleted(this, new dtFeeListRowChangeEvent(((dtFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.dtFeeListRowDeleting != null)) {
                    this.dtFeeListRowDeleting(this, new dtFeeListRowChangeEvent(((dtFeeListRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovedtFeeListRow(dtFeeListRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                dsFeeList ds = new dsFeeList();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "dtFeeListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class dtFeeListRow : System.Data.DataRow {
            
            private dtFeeListDataTable tabledtFeeList;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal dtFeeListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tabledtFeeList = ((dtFeeListDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 分类 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.分类Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“分类”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.分类Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 项目名称 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.项目名称Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“项目名称”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.项目名称Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 规格 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.规格Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“规格”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.规格Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 单价 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.单价Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“单价”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.单价Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 数量 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.数量Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“数量”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.数量Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 单位 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.单位Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“单位”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.单位Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 金额 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.金额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“金额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.金额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 自费 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.自费Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“自费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.自费Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 自付 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.自付Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“自付”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.自付Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 公费 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.公费Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“公费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.公费Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 住院号 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.住院号Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“住院号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.住院号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 姓名 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.姓名Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“姓名”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.姓名Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 病区 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.病区Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“病区”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.病区Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 床号 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.床号Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“床号”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.床号Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 总费用 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.总费用Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“总费用”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.总费用Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 总公费 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.总公费Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“总公费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.总公费Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 已清费用 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.已清费用Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“已清费用”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.已清费用Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 未清费用 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.未清费用Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“未清费用”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.未清费用Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 预交金 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.预交金Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“预交金”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.预交金Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 余额 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.余额Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“余额”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.余额Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 本日发生 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.本日发生Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“本日发生”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.本日发生Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 本日公费 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.本日公费Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“本日公费”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.本日公费Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal 应交 {
                get {
                    try {
                        return ((decimal)(this[this.tabledtFeeList.应交Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“应交”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.应交Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime 费用日期 {
                get {
                    try {
                        return ((System.DateTime)(this[this.tabledtFeeList.费用日期Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“费用日期”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.费用日期Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 科室代码 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.科室代码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“科室代码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.科室代码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string 国家编码 {
                get {
                    try {
                        return ((string)(this[this.tabledtFeeList.国家编码Column]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("表“dtFeeList”中列“国家编码”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tabledtFeeList.国家编码Column] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is分类Null() {
                return this.IsNull(this.tabledtFeeList.分类Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set分类Null() {
                this[this.tabledtFeeList.分类Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is项目名称Null() {
                return this.IsNull(this.tabledtFeeList.项目名称Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set项目名称Null() {
                this[this.tabledtFeeList.项目名称Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is规格Null() {
                return this.IsNull(this.tabledtFeeList.规格Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set规格Null() {
                this[this.tabledtFeeList.规格Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单价Null() {
                return this.IsNull(this.tabledtFeeList.单价Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单价Null() {
                this[this.tabledtFeeList.单价Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is数量Null() {
                return this.IsNull(this.tabledtFeeList.数量Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set数量Null() {
                this[this.tabledtFeeList.数量Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is单位Null() {
                return this.IsNull(this.tabledtFeeList.单位Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set单位Null() {
                this[this.tabledtFeeList.单位Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is金额Null() {
                return this.IsNull(this.tabledtFeeList.金额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set金额Null() {
                this[this.tabledtFeeList.金额Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is自费Null() {
                return this.IsNull(this.tabledtFeeList.自费Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set自费Null() {
                this[this.tabledtFeeList.自费Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is自付Null() {
                return this.IsNull(this.tabledtFeeList.自付Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set自付Null() {
                this[this.tabledtFeeList.自付Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is公费Null() {
                return this.IsNull(this.tabledtFeeList.公费Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set公费Null() {
                this[this.tabledtFeeList.公费Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is住院号Null() {
                return this.IsNull(this.tabledtFeeList.住院号Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set住院号Null() {
                this[this.tabledtFeeList.住院号Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is姓名Null() {
                return this.IsNull(this.tabledtFeeList.姓名Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set姓名Null() {
                this[this.tabledtFeeList.姓名Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is病区Null() {
                return this.IsNull(this.tabledtFeeList.病区Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set病区Null() {
                this[this.tabledtFeeList.病区Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is床号Null() {
                return this.IsNull(this.tabledtFeeList.床号Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set床号Null() {
                this[this.tabledtFeeList.床号Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is总费用Null() {
                return this.IsNull(this.tabledtFeeList.总费用Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set总费用Null() {
                this[this.tabledtFeeList.总费用Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is总公费Null() {
                return this.IsNull(this.tabledtFeeList.总公费Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set总公费Null() {
                this[this.tabledtFeeList.总公费Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is已清费用Null() {
                return this.IsNull(this.tabledtFeeList.已清费用Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set已清费用Null() {
                this[this.tabledtFeeList.已清费用Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is未清费用Null() {
                return this.IsNull(this.tabledtFeeList.未清费用Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set未清费用Null() {
                this[this.tabledtFeeList.未清费用Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is预交金Null() {
                return this.IsNull(this.tabledtFeeList.预交金Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set预交金Null() {
                this[this.tabledtFeeList.预交金Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is余额Null() {
                return this.IsNull(this.tabledtFeeList.余额Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set余额Null() {
                this[this.tabledtFeeList.余额Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is本日发生Null() {
                return this.IsNull(this.tabledtFeeList.本日发生Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set本日发生Null() {
                this[this.tabledtFeeList.本日发生Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is本日公费Null() {
                return this.IsNull(this.tabledtFeeList.本日公费Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set本日公费Null() {
                this[this.tabledtFeeList.本日公费Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is应交Null() {
                return this.IsNull(this.tabledtFeeList.应交Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set应交Null() {
                this[this.tabledtFeeList.应交Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is费用日期Null() {
                return this.IsNull(this.tabledtFeeList.费用日期Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set费用日期Null() {
                this[this.tabledtFeeList.费用日期Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is科室代码Null() {
                return this.IsNull(this.tabledtFeeList.科室代码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set科室代码Null() {
                this[this.tabledtFeeList.科室代码Column] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Is国家编码Null() {
                return this.IsNull(this.tabledtFeeList.国家编码Column);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Set国家编码Null() {
                this[this.tabledtFeeList.国家编码Column] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class dtFeeListRowChangeEvent : System.EventArgs {
            
            private dtFeeListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFeeListRowChangeEvent(dtFeeListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public dtFeeListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591